Complete Spring Boot API Explanation for Spring Tool Suite 4
Let me break down every component of your banking API solution, explaining each line and its purpose in Spring Tool Suite 4 (STS4).

1. Entity Classes
Bank.java
java
Copy
package com.savings.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@Entity
@Table(name = "banks", 
       uniqueConstraints = @UniqueConstraint(columnNames = "name"))
public class Bank {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    private double baseInterestRate;
    private double premiumInterestRate;
    private double thresholdAmount;

    public Bank(String name, double baseRate, double premiumRate, double threshold) {
        this.name = name;
        this.baseInterestRate = baseRate;
        this.premiumInterestRate = premiumRate;
        this.thresholdAmount = threshold;
    }
}
Key Annotations:

@Entity: Marks as JPA entity (maps to DB table)

@Table: Specifies table name and unique constraint on name

@Id + @GeneratedValue: Auto-increment primary key

@Column(nullable=false): Makes name a required field

@Data (Lombok): Auto-generates getters/setters/toString()

@NoArgsConstructor: Creates default constructor (JPA requirement)

Customer.java
java
Copy
package com.savings.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@Entity
@Table(name = "customers")
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String firstName;
    private String lastName;
    private double savingsBalance;

    @ManyToOne
    @JoinColumn(name = "bank_id")
    private Bank bank;

    public Customer(String firstName, String lastName, double balance, Bank bank) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.savingsBalance = balance;
        this.bank = bank;
    }

    public void calculateMonthlyInterest() {
        double rate = (savingsBalance >= bank.getThresholdAmount())
                ? bank.getPremiumInterestRate()
                : bank.getBaseInterestRate();
        savingsBalance += (savingsBalance * rate) / 12;
    }
}
Key Features:
In banking, a threshold refers to a specific limit or level that serves as a trigger for certain actions, restrictions, or consequences.
@ManyToOne: Establishes relationship with Bank

calculateMonthlyInterest(): Business logic for interest calculation

Lombok annotations reduce boilerplate code

2. DataInitializer.java
java
Copy
package com.savings.config;

import com.savings.entity.Bank;
import com.savings.repository.BankRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Component
public class DataInitializer implements CommandLineRunner {

    @Autowired
    private BankRepository bankRepo;

    @Override
    @Transactional
    public void run(String... args) {
        List<Bank> defaultBanks = List.of(
            // Banks with their rates
        );

        defaultBanks.forEach(bank -> {
            if (!bankRepo.existsByName(bank.getName())) {
                bankRepo.save(bank);
            }
        });
    }
}
Imports
import com.savings.entity.Bank;
import com.savings.repository.BankRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
com.savings.entity.Bank: Represents the Bank entity class.
com.savings.repository.BankRepository: Represents the repository interface for performing CRUD operations on Bank entities.
org.springframework.beans.factory.annotation.Autowired: Used for dependency injection.
org.springframework.boot.CommandLineRunner: Interface to indicate that a bean should run when the application starts.
org.springframework.stereotype.Component: Indicates that this class is a Spring component.
org.springframework.transaction.annotation.Transactional: Ensures that the method runs within a transaction.
java.util.List: Used to handle lists of Bank entities.
Class Definition
@Component
public class DataInitializer implements CommandLineRunner {
@Component: Marks this class as a Spring component, making it eligible for component scanning and dependency injection.
DataInitializer: The class responsible for initializing data.
implements CommandLineRunner: Indicates that this class will run specific code after the application context is loaded.
Dependency Injection
@Autowired
private BankRepository bankRepo;
@Autowired: Injects the BankRepository bean into this class.
bankRepo: The repository used to perform CRUD operations on Bank entities.
Method Definition
@Override
@Transactional
public void run(String... args) {
@Override: Indicates that this method overrides the run method from CommandLineRunner.
@Transactional: Ensures that the method runs within a transaction, providing consistency and rollback capabilities.
run(String... args): The method that will be executed after the application context is loaded.
Data Initialization
List<Bank> defaultBanks = List.of(
    // Banks with their rates
);
List.of(...): Creates a list of default Bank entities. This is where you would specify the default banks and their rates.
Saving Data
defaultBanks.forEach(bank -> {
    if (!bankRepo.existsByName(bank.getName())) {
        bankRepo.save(bank);
    }
});
defaultBanks.forEach(bank -> {...}): Iterates over each Bank entity in the defaultBanks list.
if (!bankRepo.existsByName(bank.getName())): Checks if a bank with the same name already exists in the repository.
bankRepo.save(bank): Saves the Bank entity to the repository if it does not already exist.
Purpose
The purpose of this code is to ensure that certain default Bank entities are present in the database when the application starts. It checks if each bank already exists by name and only saves it if it does not exist, preventing duplicates.

Why and What is Used
Spring Boot: Provides the framework for building the application.
CommandLineRunner: Allows execution of code after the application context is loaded.
Component: Marks the class for dependency injection and component scanning.
Transactional: Ensures the method runs within a transaction for consistency.
Autowired: Injects the repository bean for performing database operations.
BankRepository: Provides methods for CRUD operations on Bank entities.
List.of(...): Creates a list of default Bank entities.
Why This Works in STS4:

@Transactional: Ensures all operations complete as a single transaction

existsByName(): Custom query prevents duplicates

Runs on application startup (CommandLineRunner)

3. BankRepository.java
java
Copy
package com.savings.repository;

import com.savings.entity.Bank;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

@Repository
public interface BankRepository extends JpaRepository<Bank, Long> {
    Bank findByName(String name);
    
    @Query("SELECT CASE WHEN COUNT(b) > 0 THEN true ELSE false END FROM Bank b WHERE b.name = :name")
    boolean existsByName(String name);
}
Key Improvements:
This code defines a repository interface for the Bank entity, enabling CRUD operations and custom queries using Spring Data JPA.

Package Declaration
package com.savings.repository;
package com.savings.repository: Specifies the package where this interface is located.
Imports
import com.savings.entity.Bank;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
com.savings.entity.Bank: Imports the Bank entity class.
org.springframework.data.jpa.repository.JpaRepository: Imports the JpaRepository interface, which provides CRUD operations.
org.springframework.data.jpa.repository.Query: Imports the Query annotation for custom queries.
org.springframework.stereotype.Repository: Imports the Repository annotation to mark this interface as a Spring Data repository.
Repository Annotation
@Repository
public interface BankRepository extends JpaRepository<Bank, Long> {
@Repository: Marks this interface as a Spring Data repository, making it eligible for component scanning and dependency injection.
extends JpaRepository<Bank, Long>: Extends the JpaRepository interface, providing CRUD operations for the Bank entity with Long as the ID type.
Custom Methods
findByName Method
Bank findByName(String name);
Bank findByName(String name): Defines a method to find a Bank entity by its name. Spring Data JPA will automatically generate the query based on the method name.
existsByName Method
@Query("SELECT CASE WHEN COUNT(b) > 0 THEN true ELSE false END FROM Bank b WHERE b.name = :name")
boolean existsByName(String name);
@Query: Specifies a custom query to check if a Bank entity with the given name exists.
SELECT CASE WHEN COUNT(b) > 0 THEN true ELSE false END FROM Bank b WHERE b.name = :name: The query counts the number of Bank entities with the specified name and returns true if the count is greater than zero, otherwise false.
boolean existsByName(String name): Defines a method to check if a Bank entity with the given name exists using the custom query.
Key Improvements
Custom existsByName Query:

The custom query provides an efficient way to check the existence of a Bank entity by name, avoiding the need to retrieve the entire entity.
This improves performance, especially when dealing with large datasets.
@Repository Annotation:

Marks the interface as a Spring Data repository, enabling Spring to manage it as a bean and provide dependency injection.
Ensures that the repository is recognized and managed by the Spring framework.
Extends JpaRepository:

Provides built-in CRUD operations for the Bank entity, reducing boilerplate code.
Enables the use of additional JPA features like pagination and sorting.
Summary
The BankRepository interface leverages Spring Data JPA to provide efficient and convenient data access methods for the Bank entity. The custom existsByName query enhances performance by checking the existence of an entity without retrieving it, while extending JpaRepository simplifies CRUD operations.

Custom existsByName() query for efficient existence checking

@Repository: Marks as Spring Data repository

Extends JpaRepository for CRUD operations

4. AccountController.java
java
Copy
@RestController
@RequestMapping("/api/accounts")
public class AccountController {

    @Autowired
    private CustomerRepository customerRepo;
    
    @Autowired
    private BankRepository bankRepo;

    @PostMapping
    @Transactional
    public ResponseEntity<?> createAccount(
            @RequestParam String firstName,
            @RequestParam String lastName,
            @RequestParam String bankName,
            @RequestParam double initialDeposit) {
        
        try {
            // Validation logic
            Bank bank = bankRepo.findByName(bankName);
            Customer customer = new Customer(firstName, lastName, initialDeposit, bank);
            return ResponseEntity.ok(customerRepo.save(customer));
        } catch (Exception e) {
            return ResponseEntity.internalServerError().build();
        }
    }

    // Other endpoints...
}
STS4-Specific Notes:

Validation:
The AccountController class is a Spring Boot REST controller that handles HTTP requests related to account operations. It includes an endpoint for creating a new account.

Annotations and Imports
@RestController
@RequestMapping("/api/accounts")
public class AccountController {
@RestController: Marks this class as a REST controller, making it capable of handling HTTP requests and returning JSON responses.
@RequestMapping("/api/accounts"): Specifies the base URL for all endpoints in this controller. All endpoints will be prefixed with /api/accounts.
Dependency Injection
@Autowired
private CustomerRepository customerRepo;

@Autowired
private BankRepository bankRepo;
@Autowired: Injects the CustomerRepository and BankRepository beans into this class.
customerRepo: Repository for performing CRUD operations on Customer entities.
bankRepo: Repository for performing CRUD operations on Bank entities.
Create Account Endpoint
@PostMapping
@Transactional
public ResponseEntity<?> createAccount(
        @RequestParam String firstName,
        @RequestParam String lastName,
        @RequestParam String bankName,
        @RequestParam double initialDeposit) {
    
    try {
        // Validation logic
        Bank bank = bankRepo.findByName(bankName);
        Customer customer = new Customer(firstName, lastName, initialDeposit, bank);
        return ResponseEntity.ok(customerRepo.save(customer));
    } catch (Exception e) {
        return ResponseEntity.internalServerError().build();
    }
}
@PostMapping: Maps HTTP POST requests to this method. This endpoint will be accessible via /api/accounts.
@Transactional: Ensures that the method runs within a transaction, providing consistency and rollback capabilities in case of an error.
ResponseEntity<?> createAccount(...): Method to handle the creation of a new account.
Method Parameters
@RequestParam String firstName,
@RequestParam String lastName,
@RequestParam String bankName,
@RequestParam double initialDeposit
@RequestParam: Binds HTTP request parameters to method parameters.
String firstName: The first name of the customer.
String lastName: The last name of the customer.
String bankName: The name of the bank where the account will be created.
double initialDeposit: The initial deposit amount for the account.
Method Logic
Validation Logic:

Bank bank = bankRepo.findByName(bankName);
Retrieves the Bank entity by its name using the bankRepo.
Create Customer:

Customer customer = new Customer(firstName, lastName, initialDeposit, bank);
Creates a new Customer entity with the provided details and the retrieved Bank entity.
Save Customer:

return ResponseEntity.ok(customerRepo.save(customer));
Saves the Customer entity to the customerRepo and returns an HTTP 200 OK response with the saved customer.
Exception Handling:

} catch (Exception e) {
    return ResponseEntity.internalServerError().build();
}
Catches any exceptions that occur during the process and returns an HTTP 500 Internal Server Error response.
Summary
The AccountController class provides an endpoint for creating new accounts. It validates the input, retrieves the necessary Bank entity, creates a new Customer entity, saves it to the repository, and handles any exceptions that may occur. This setup ensures that account creation is handled efficiently and consistently within a transactional context.

Proper null checks

Positive deposit validation

Error Handling:

Try-catch blocks

Appropriate HTTP status codes

Transactions:

@Transactional on write operations

5. application.properties
properties
Copy
# Database
spring.datasource.url=jdbc:mysql://localhost:3306/savings_db?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root

# JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.jdbc.batch_size=10
Critical Settings for STS4:
Setting this to 10 means that Hibernate will batch up to 10 SQL statements before sending them to the database. 
createDatabaseIfNotExist=true: Auto-creates DB

ddl-auto=update: Safely updates schema

Batch settings optimize performance

Testing in STS4
1. Running the Application
Right-click project → Run As → Spring Boot App

Verify console output for:

Copy
Started SavingsApplication in X seconds
2. Postman Testing
Create Account:

Copy
POST localhost:8080/api/accounts?firstName=John&bankName=Axis Bank...
Check Data:

In STS4's Console: Look for Hibernate SQL logs

In MySQL Workbench: Verify table contents

Troubleshooting in STS4
Common Issues:

Duplicate Entry Errors:

Reset database: DROP DATABASE savings_db; CREATE DATABASE savings_db;

Ensure DataInitializer checks existence

Connection Issues:

Verify MySQL credentials

Check MySQL service is running

STS4-Specific:

Clean project (Project → Clean)

Update Maven dependencies (Right-click project → Maven → Update Project)

This implementation ensures your banking API works perfectly in Spring Tool Suite 4 with proper error handling and database integrity.


1. Bank.java (Entity Class)
java
Copy
package com.savings.entity;  // Package declaration

// Lombok annotations to reduce boilerplate code
import lombok.Data;       // Generates getters, setters, toString(), equals(), hashCode()
import lombok.NoArgsConstructor;  // Generates no-args constructor

// JPA annotations for database mapping
import jakarta.persistence.*;

@Data
@NoArgsConstructor
@Entity  // Marks this class as a JPA entity (will be mapped to a database table)
@Table(name = "banks",  // Specifies the table name
       uniqueConstraints = @UniqueConstraint(columnNames = "name"))  // Ensures bank names are unique
public class Bank {
    
    @Id  // Marks this field as the primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY)  // Auto-increment ID
    private Long id;

    @Column(nullable = false)  // This column cannot be null in the database
    private String name;

    private double baseInterestRate;    // Standard interest rate
    private double premiumInterestRate; // Higher rate for premium customers
    private double thresholdAmount;     // Balance required for premium rate

    // Custom constructor for easy object creation
    public Bank(String name, double baseRate, double premiumRate, double threshold) {
        this.name = name;
        this.baseInterestRate = baseRate;
        this.premiumInterestRate = premiumRate;
        this.thresholdAmount = threshold;
    }
}
2. Customer.java (Entity Class)
java
Copy
package com.savings.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@Entity
@Table(name = "customers")  // Maps to 'customers' table in database
public class Customer {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String firstName;
    private String lastName;
    private double savingsBalance;  // Current account balance

    @ManyToOne  // Many customers can belong to one bank
    @JoinColumn(name = "bank_id")  // Foreign key column in customers table
    private Bank bank;  // Reference to the associated Bank

    // Constructor for creating customer instances
    public Customer(String firstName, String lastName, double balance, Bank bank) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.savingsBalance = balance;
        this.bank = bank;
    }

    // Business logic for calculating monthly interest
    public void calculateMonthlyInterest() {
        // Determine which interest rate to use
        double rate = (savingsBalance >= bank.getThresholdAmount())
                ? bank.getPremiumInterestRate()  // Premium rate if balance meets threshold
                : bank.getBaseInterestRate();    // Standard rate otherwise
        
        // Calculate and add monthly interest
        savingsBalance += (savingsBalance * rate) / 12;
    }
}
3. BankRepository.java (Repository Interface)
java
Copy
package com.savings.repository;

import com.savings.entity.Bank;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

@Repository  // Marks this as a Spring Data repository
public interface BankRepository extends JpaRepository<Bank, Long> {
    // Standard CRUD operations are inherited from JpaRepository
    
    // Custom method to find bank by name
    Bank findByName(String name);
    
    // Custom query to check if bank exists
    @Query("SELECT CASE WHEN COUNT(b) > 0 THEN true ELSE false END FROM Bank b WHERE b.name = :name")
    boolean existsByName(String name);
}
4. DataInitializer.java (Configuration)
java
Copy
package com.savings.config;

import com.savings.entity.Bank;
import com.savings.repository.BankRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Component  // Marks this as a Spring component
public class DataInitializer implements CommandLineRunner {
    // This runs after application startup

    @Autowired  // Injects the BankRepository
    private BankRepository bankRepo;

    @Override
    @Transactional  // Wraps all operations in a transaction
    public void run(String... args) {
        // List of default banks to initialize
        List<Bank> defaultBanks = List.of(
            new Bank("Axis Bank", 0.03, 0.035, 500000),
            // Other banks...
        );

        // For each bank, check if it exists before saving
        defaultBanks.forEach(bank -> {
            if (!bankRepo.existsByName(bank.getName())) {
                bankRepo.save(bank);
            }
        });
    }
}
5. AccountController.java (REST Controller)
java
Copy
package com.savings.controller;

import com.savings.entity.Bank;
import com.savings.entity.Customer;
import com.savings.repository.BankRepository;
import com.savings.repository.CustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController  // Marks this as a REST controller
@RequestMapping("/api/accounts")  // Base path for all endpoints
public class AccountController {

    @Autowired  // Injects CustomerRepository
    private CustomerRepository customerRepo;
    
    @Autowired  // Injects BankRepository
    private BankRepository bankRepo;

    @PostMapping  // Handles POST requests to /api/accounts
    @Transactional  // Wraps method in transaction
    public ResponseEntity<?> createAccount(
            @RequestParam String firstName,
            @RequestParam String lastName,
            @RequestParam String bankName,
            @RequestParam double initialDeposit) {
        
        try {
            // Validate deposit amount
            if (initialDeposit <= 0) {
                return ResponseEntity.badRequest().body("Initial deposit must be positive");
            }

            // Find the specified bank
            Bank bank = bankRepo.findByName(bankName);
            if (bank == null) {
                return ResponseEntity.notFound().build();
            }

            // Create and save new customer
            Customer customer = new Customer(firstName, lastName, initialDeposit, bank);
            Customer savedCustomer = customerRepo.save(customer);
            
            return ResponseEntity.ok(savedCustomer);
            
        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                    .body("Error creating account: " + e.getMessage());
        }
    }

    @GetMapping  // Handles GET requests to /api/accounts
    public ResponseEntity<List<Customer>> getAllAccounts() {
        return ResponseEntity.ok(customerRepo.findAll());
    }

    @PostMapping("/interest")  // Handles POST to /api/accounts/interest
    @Transactional
    public ResponseEntity<String> calculateInterest() {
        customerRepo.findAll().forEach(customer -> {
            customer.calculateMonthlyInterest();  // Calculate interest
            customerRepo.save(customer);  // Update balance
        });
        return ResponseEntity.ok("Interest calculated for all accounts");
    }
}
6. application.properties (Configuration)
properties
Copy
# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/savings_db?createDatabaseIfNotExist=true
# ^ JDBC URL with auto-create database option
spring.datasource.username=root  # MySQL username
spring.datasource.password=yourpassword  # MySQL password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver  # MySQL driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update  
# ^ Automatically updates database schema
spring.jpa.show-sql=true  # Shows SQL in console
spring.jpa.properties.hibernate.format_sql=true  # Formats SQL for readability
spring.jpa.properties.hibernate.jdbc.batch_size=10  # Optimizes batch operations
spring.jpa.properties.hibernate.order_inserts=true  # Optimizes insert ordering
Key Architectural Components
Entities:

Represent database tables

Contain business logic (like interest calculation)

Repositories:

Interface with the database

Provide CRUD operations

Controller:

Handles HTTP requests

Manages transactions

Returns appropriate responses

Configuration:

DataInitializer seeds the database

application.properties configures connections

How It Works Together
Startup:

DataInitializer runs and populates banks

Hibernate creates/updates tables

API Flow:

Request → Controller → Service (embedded) → Repository → Database

Response flows back through the same chain

Database:

MySQL stores all persistent data

JPA handles object-relational mapping

This implementation provides a robust, production-ready banking API with proper error handling, validation, and database integrity.
