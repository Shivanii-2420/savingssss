http://localhost:8080/api/accounts?firstName=John&lastName=Doe&bankName=Axis Bank&initialDeposit=50000
Step 2: Test with Postman
1. Test Creating an Account (POST)
Open Postman

Create a new request:

Method: POST

URL:

Copy
http://localhost:8080/api/accounts?firstName=John&lastName=Doe&bankName=Axis Bank&initialDeposit=50000
Click Send

Successful Response (200 OK):

json
Copy
{
    "id": 1,
    "firstName": "John",
    "lastName": "Doe",
    "savingsBalance": 50000.0,
    "bank": {
        "id": 1,
        "name": "Axis Bank",
        "baseInterestRate": 0.03,
        "premiumInterestRate": 0.035,
        "thresholdAmount": 500000.0
    }
}
2. Test Listing All Customers (GET)
New request in Postman:

Method: GET

URL:

Copy
http://localhost:8080/api/accounts
Click Send

Response:

json
Copy
[
    {
        "id": 1,
        "firstName": "John",
        "lastName": "Doe",
        "savingsBalance": 50000.0,
        "bank": {
            "id": 1,
            "name": "Axis Bank"
        }
    }
]
3. Test Calculating Interest (POST)
New request in Postman:

Method: POST

URL:

Copy
http://localhost:8080/api/accounts/interest
Click Send

Response:

Copy
Interest calculated for all accounts
Verify Update:

Call the GET /api/accounts endpoint again

John's balance should now be:
50000 + (50000 * 0.03 / 12) = 50125

Step 3: Verify in MySQL Workbench
Open MySQL Workbench

Connect to your local server

Run these queries:

sql
Copy
-- See all customers
SELECT * FROM savings_db.customers;

-- See all banks
SELECT * FROM savings_db.banks;
You should see:

Your created customer (John Doe)

All banks from DataInitializer

CODES BELOW
1. Updated Entity Classes
Bank.java
java
Copy
package com.savings.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@Entity
@Table(name = "banks", 
       uniqueConstraints = @UniqueConstraint(columnNames = "name"))
public class Bank {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    private double baseInterestRate;
    private double premiumInterestRate;
    private double thresholdAmount;

    public Bank(String name, double baseRate, double premiumRate, double threshold) {
        this.name = name;
        this.baseInterestRate = baseRate;
        this.premiumInterestRate = premiumRate;
        this.thresholdAmount = threshold;
    }
}
Customer.java
java
Copy
package com.savings.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@Entity
@Table(name = "customers")
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String firstName;
    private String lastName;
    private double savingsBalance;

    @ManyToOne
    @JoinColumn(name = "bank_id")
    private Bank bank;

    public Customer(String firstName, String lastName, double balance, Bank bank) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.savingsBalance = balance;
        this.bank = bank;
    }

    public void calculateMonthlyInterest() {
        double rate = (savingsBalance >= bank.getThresholdAmount())
                ? bank.getPremiumInterestRate()
                : bank.getBaseInterestRate();
        savingsBalance += (savingsBalance * rate) / 12;
    }
}
2. Improved DataInitializer.java
java
Copy
package com.savings.config;

import com.savings.entity.Bank;
import com.savings.repository.BankRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Component
public class DataInitializer implements CommandLineRunner {

    @Autowired
    private BankRepository bankRepo;

    @Override
    @Transactional
    public void run(String... args) {
        List<Bank> defaultBanks = List.of(
            new Bank("Axis Bank", 0.03, 0.035, 500000),
            new Bank("HDFC Bank", 0.03, 0.035, 500000),
            new Bank("ICICI Bank", 0.03, 0.035, 500000),
            new Bank("Central Bank Of India", 0.028, 0.03, 100000000),
            new Bank("State Bank Of India", 0.027, 0.03, 100000000),
            new Bank("Indian Bank", 0.0275, 0.029, 1000000),
            new Bank("Tamilnadu Grameena Bank", 0.0325, 0.0325, 0),
            new Bank("Telengana Grammena Bank", 0.03, 0.03, 0),
            new Bank("United Overseas Bank", 0.0, 0.0, 0)
        );

        defaultBanks.forEach(bank -> {
            if (!bankRepo.existsByName(bank.getName())) {
                bankRepo.save(bank);
            }
        });
    }
}
3. Enhanced BankRepository.java
java
Copy
package com.savings.repository;

import com.savings.entity.Bank;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

@Repository
public interface BankRepository extends JpaRepository<Bank, Long> {
    Bank findByName(String name);
    
    @Query("SELECT CASE WHEN COUNT(b) > 0 THEN true ELSE false END FROM Bank b WHERE b.name = :name")
    boolean existsByName(String name);
}
4. Robust AccountController.java
java
Copy
package com.savings.controller;

import com.savings.entity.Bank;
import com.savings.entity.Customer;
import com.savings.repository.BankRepository;
import com.savings.repository.CustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/accounts")
public class AccountController {

    @Autowired
    private CustomerRepository customerRepo;
    
    @Autowired
    private BankRepository bankRepo;

    @PostMapping
    @Transactional
    public ResponseEntity<?> createAccount(
            @RequestParam String firstName,
            @RequestParam String lastName,
            @RequestParam String bankName,
            @RequestParam double initialDeposit) {
        
        try {
            // Validate input
            if (initialDeposit <= 0) {
                return ResponseEntity.badRequest().body("Initial deposit must be positive");
            }

            Bank bank = bankRepo.findByName(bankName);
            if (bank == null) {
                return ResponseEntity.notFound().build();
            }

            Customer customer = new Customer(firstName, lastName, initialDeposit, bank);
            Customer savedCustomer = customerRepo.save(customer);
            
            return ResponseEntity.ok(savedCustomer);
            
        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                    .body("Error creating account: " + e.getMessage());
        }
    }

    @GetMapping
    public ResponseEntity<List<Customer>> getAllAccounts() {
        return ResponseEntity.ok(customerRepo.findAll());
    }

    @PostMapping("/interest")
    @Transactional
    public ResponseEntity<String> calculateInterest() {
        customerRepo.findAll().forEach(customer -> {
            customer.calculateMonthlyInterest();
            customerRepo.save(customer);
        });
        return ResponseEntity.ok("Interest calculated for all accounts");
    }
}
5. application.properties
properties
Copy
# Database
spring.datasource.url=jdbc:mysql://localhost:3306/savings_db?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=yourpassword
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.batch_size=10
spring.jpa.properties.hibernate.order_inserts=true

# Handle duplicate key errors gracefully
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
